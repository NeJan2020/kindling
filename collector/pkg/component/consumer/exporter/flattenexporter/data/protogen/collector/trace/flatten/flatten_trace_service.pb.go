// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: opentelemetry/proto/collector/trace/flatten/flatten_trace_service.proto

package flatten

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	v1 "github.com/Kindling-project/kindling/collector/pkg/component/consumer/exporter/flattenexporter/data/protogen/common/v1"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ExportFlattenTraceServiceRequest struct {
	// An array of ResourceSpans as Bytes.
	// For data coming from a single resource this array will typically contain one
	// element. Intermediary nodes (such as OpenTelemetry Collector) that receive
	// data from multiple origins typically batch the data before forwarding further and
	// in that case this array will contain multiple elements.
	ResourceSpansBytes [][]byte `protobuf:"bytes,1,rep,name=resource_spans_bytes,json=resourceSpansBytes,proto3" json:"resource_spans_bytes,omitempty"`
	// 采集时间
	StartTimeUnixNano uint64 `protobuf:"fixed64,4,opt,name=start_time_unix_nano,json=startTimeUnixNano,proto3" json:"start_time_unix_nano,omitempty"`
	// 主机信息
	Service              *v1.Service `protobuf:"bytes,5,opt,name=service,proto3" json:"service,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ExportFlattenTraceServiceRequest) Reset()         { *m = ExportFlattenTraceServiceRequest{} }
func (m *ExportFlattenTraceServiceRequest) String() string { return proto.CompactTextString(m) }
func (*ExportFlattenTraceServiceRequest) ProtoMessage()    {}
func (*ExportFlattenTraceServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fab80ba278b332c1, []int{0}
}
func (m *ExportFlattenTraceServiceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExportFlattenTraceServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExportFlattenTraceServiceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExportFlattenTraceServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExportFlattenTraceServiceRequest.Merge(m, src)
}
func (m *ExportFlattenTraceServiceRequest) XXX_Size() int {
	return m.Size()
}
func (m *ExportFlattenTraceServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExportFlattenTraceServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExportFlattenTraceServiceRequest proto.InternalMessageInfo

func (m *ExportFlattenTraceServiceRequest) GetResourceSpansBytes() [][]byte {
	if m != nil {
		return m.ResourceSpansBytes
	}
	return nil
}

func (m *ExportFlattenTraceServiceRequest) GetStartTimeUnixNano() uint64 {
	if m != nil {
		return m.StartTimeUnixNano
	}
	return 0
}

func (m *ExportFlattenTraceServiceRequest) GetService() *v1.Service {
	if m != nil {
		return m.Service
	}
	return nil
}

type ExportFlattenTraceServiceResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExportFlattenTraceServiceResponse) Reset()         { *m = ExportFlattenTraceServiceResponse{} }
func (m *ExportFlattenTraceServiceResponse) String() string { return proto.CompactTextString(m) }
func (*ExportFlattenTraceServiceResponse) ProtoMessage()    {}
func (*ExportFlattenTraceServiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fab80ba278b332c1, []int{1}
}
func (m *ExportFlattenTraceServiceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExportFlattenTraceServiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExportFlattenTraceServiceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExportFlattenTraceServiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExportFlattenTraceServiceResponse.Merge(m, src)
}
func (m *ExportFlattenTraceServiceResponse) XXX_Size() int {
	return m.Size()
}
func (m *ExportFlattenTraceServiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExportFlattenTraceServiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExportFlattenTraceServiceResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ExportFlattenTraceServiceRequest)(nil), "opentelemetry.proto.collector.trace.flatten.ExportFlattenTraceServiceRequest")
	proto.RegisterType((*ExportFlattenTraceServiceResponse)(nil), "opentelemetry.proto.collector.trace.flatten.ExportFlattenTraceServiceResponse")
}

func init() {
	proto.RegisterFile("opentelemetry/proto/collector/trace/flatten/flatten_trace_service.proto", fileDescriptor_fab80ba278b332c1)
}

var fileDescriptor_fab80ba278b332c1 = []byte{
	// 414 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0xc1, 0x6e, 0xd4, 0x30,
	0x10, 0xc5, 0x02, 0x16, 0xc9, 0x70, 0x21, 0xf4, 0xb0, 0xda, 0xc3, 0x2a, 0x2c, 0x12, 0x5a, 0x81,
	0x6a, 0xd3, 0xf6, 0x07, 0xd0, 0x4a, 0xc0, 0x01, 0x51, 0x55, 0xdb, 0x72, 0xe1, 0x12, 0x39, 0xe9,
	0x34, 0x18, 0x62, 0x4f, 0xb0, 0x27, 0xd1, 0xf6, 0x93, 0xf8, 0x0c, 0x4e, 0x70, 0xe4, 0xc2, 0x1d,
	0xed, 0x97, 0xa0, 0xd8, 0x49, 0x55, 0xa4, 0xb0, 0x08, 0x89, 0x53, 0xec, 0x79, 0xf3, 0xde, 0x9b,
	0x19, 0x4f, 0xf8, 0x2b, 0xac, 0xc1, 0x12, 0x54, 0x60, 0x80, 0xdc, 0xa5, 0xac, 0x1d, 0x12, 0xca,
	0x02, 0xab, 0x0a, 0x0a, 0x42, 0x27, 0xc9, 0xa9, 0x02, 0xe4, 0x45, 0xa5, 0x88, 0xc0, 0x0e, 0xdf,
	0x2c, 0x44, 0x33, 0x0f, 0xae, 0xd5, 0x05, 0x88, 0xc0, 0x49, 0x9e, 0xfe, 0x26, 0x14, 0x83, 0xe2,
	0x4a, 0x48, 0x04, 0x8a, 0xe8, 0x05, 0x66, 0x4f, 0xc6, 0x5d, 0x8d, 0x41, 0x2b, 0xdb, 0x83, 0xfe,
	0x14, 0x35, 0x66, 0xfb, 0xa5, 0xa6, 0xf7, 0x4d, 0x2e, 0x0a, 0x34, 0xb2, 0xc4, 0x12, 0x63, 0x76,
	0xde, 0x5c, 0x84, 0x5b, 0xa4, 0x76, 0xa7, 0x98, 0xbe, 0xf8, 0xca, 0x78, 0xfa, 0x62, 0x53, 0xa3,
	0xa3, 0x97, 0xd1, 0xec, 0xac, 0x73, 0x3e, 0x8d, 0xb5, 0xae, 0xe1, 0x53, 0x03, 0x9e, 0x92, 0x67,
	0x7c, 0xcf, 0x81, 0xc7, 0xc6, 0x75, 0x6d, 0xd4, 0xca, 0xfa, 0x2c, 0xbf, 0x24, 0xf0, 0x53, 0x96,
	0xde, 0x5c, 0xde, 0x5b, 0x27, 0x03, 0x76, 0xda, 0x41, 0xab, 0x0e, 0x49, 0x24, 0xdf, 0xf3, 0xa4,
	0x1c, 0x65, 0xa4, 0x0d, 0x64, 0x8d, 0xd5, 0x9b, 0xcc, 0x2a, 0x8b, 0xd3, 0x5b, 0x29, 0x5b, 0x4e,
	0xd6, 0xf7, 0x03, 0x76, 0xa6, 0x0d, 0xbc, 0xb5, 0x7a, 0x73, 0xac, 0x2c, 0x26, 0xcf, 0xf9, 0x9d,
	0x7e, 0x40, 0xd3, 0xdb, 0x29, 0x5b, 0xde, 0x3d, 0x7c, 0x2c, 0xc6, 0x27, 0x14, 0x5a, 0x6d, 0x0f,
	0xc4, 0x50, 0xe2, 0x40, 0x5b, 0x3c, 0xe2, 0x0f, 0x77, 0x34, 0xe2, 0x6b, 0xb4, 0x1e, 0x0e, 0xbf,
	0x30, 0xfe, 0x60, 0x04, 0x4f, 0x3e, 0x33, 0x3e, 0x89, 0xec, 0xe4, 0x8d, 0xf8, 0x87, 0xa7, 0x11,
	0x7f, 0x9b, 0xdd, 0xec, 0xf8, 0x7f, 0xc9, 0xc5, 0x0e, 0x16, 0x37, 0x56, 0x3f, 0xd8, 0xb7, 0xed,
	0x9c, 0x7d, 0xdf, 0xce, 0xd9, 0xcf, 0xed, 0x9c, 0xf1, 0x23, 0x74, 0xa5, 0x68, 0x2b, 0xed, 0x85,
	0xaa, 0x8d, 0x18, 0x5e, 0x7b, 0xb7, 0xcf, 0x6a, 0x3a, 0x62, 0x71, 0xd2, 0x31, 0x4e, 0xd8, 0xbb,
	0xf6, 0xda, 0x06, 0xbd, 0xd6, 0xf6, 0xbc, 0xd2, 0xb6, 0xdc, 0xaf, 0x1d, 0x7e, 0x80, 0x82, 0xe4,
	0xc7, 0x3e, 0x70, 0x6d, 0xe9, 0x0b, 0xb4, 0xbe, 0x31, 0xe0, 0x24, 0x84, 0xe2, 0xc1, 0x0d, 0x8b,
	0x7f, 0x75, 0x3f, 0x57, 0xa4, 0xe2, 0x1e, 0x96, 0x60, 0xff, 0xf4, 0xbb, 0xe4, 0x93, 0x90, 0x71,
	0xf4, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x2c, 0x17, 0x20, 0xa6, 0x64, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FlattenTraceServiceClient is the client API for FlattenTraceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FlattenTraceServiceClient interface {
	// For performance reasons, it is recommended to keep this RPC
	// alive for the entire life of the application.
	Export(ctx context.Context, in *ExportFlattenTraceServiceRequest, opts ...grpc.CallOption) (*ExportFlattenTraceServiceResponse, error)
}

type flattenTraceServiceClient struct {
	cc *grpc.ClientConn
}

func NewFlattenTraceServiceClient(cc *grpc.ClientConn) FlattenTraceServiceClient {
	return &flattenTraceServiceClient{cc}
}

func (c *flattenTraceServiceClient) Export(ctx context.Context, in *ExportFlattenTraceServiceRequest, opts ...grpc.CallOption) (*ExportFlattenTraceServiceResponse, error) {
	out := new(ExportFlattenTraceServiceResponse)
	err := c.cc.Invoke(ctx, "/opentelemetry.proto.collector.trace.flatten.FlattenTraceService/Export", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlattenTraceServiceServer is the server API for FlattenTraceService service.
type FlattenTraceServiceServer interface {
	// For performance reasons, it is recommended to keep this RPC
	// alive for the entire life of the application.
	Export(context.Context, *ExportFlattenTraceServiceRequest) (*ExportFlattenTraceServiceResponse, error)
}

// UnimplementedFlattenTraceServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFlattenTraceServiceServer struct {
}

func (*UnimplementedFlattenTraceServiceServer) Export(ctx context.Context, req *ExportFlattenTraceServiceRequest) (*ExportFlattenTraceServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Export not implemented")
}

func RegisterFlattenTraceServiceServer(s *grpc.Server, srv FlattenTraceServiceServer) {
	s.RegisterService(&_FlattenTraceService_serviceDesc, srv)
}

func _FlattenTraceService_Export_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportFlattenTraceServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlattenTraceServiceServer).Export(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opentelemetry.proto.collector.trace.flatten.FlattenTraceService/Export",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlattenTraceServiceServer).Export(ctx, req.(*ExportFlattenTraceServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FlattenTraceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "opentelemetry.proto.collector.trace.flatten.FlattenTraceService",
	HandlerType: (*FlattenTraceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Export",
			Handler:    _FlattenTraceService_Export_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "opentelemetry/proto/collector/trace/flatten/flatten_trace_service.proto",
}

func (m *ExportFlattenTraceServiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExportFlattenTraceServiceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExportFlattenTraceServiceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Service != nil {
		{
			size, err := m.Service.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlattenTraceService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.StartTimeUnixNano != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.StartTimeUnixNano))
		i--
		dAtA[i] = 0x21
	}
	if len(m.ResourceSpansBytes) > 0 {
		for iNdEx := len(m.ResourceSpansBytes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ResourceSpansBytes[iNdEx])
			copy(dAtA[i:], m.ResourceSpansBytes[iNdEx])
			i = encodeVarintFlattenTraceService(dAtA, i, uint64(len(m.ResourceSpansBytes[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ExportFlattenTraceServiceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExportFlattenTraceServiceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExportFlattenTraceServiceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func encodeVarintFlattenTraceService(dAtA []byte, offset int, v uint64) int {
	offset -= sovFlattenTraceService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ExportFlattenTraceServiceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ResourceSpansBytes) > 0 {
		for _, b := range m.ResourceSpansBytes {
			l = len(b)
			n += 1 + l + sovFlattenTraceService(uint64(l))
		}
	}
	if m.StartTimeUnixNano != 0 {
		n += 9
	}
	if m.Service != nil {
		l = m.Service.Size()
		n += 1 + l + sovFlattenTraceService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExportFlattenTraceServiceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovFlattenTraceService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFlattenTraceService(x uint64) (n int) {
	return sovFlattenTraceService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ExportFlattenTraceServiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlattenTraceService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExportFlattenTraceServiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExportFlattenTraceServiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceSpansBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlattenTraceService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFlattenTraceService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFlattenTraceService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceSpansBytes = append(m.ResourceSpansBytes, make([]byte, postIndex-iNdEx))
			copy(m.ResourceSpansBytes[len(m.ResourceSpansBytes)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTimeUnixNano", wireType)
			}
			m.StartTimeUnixNano = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTimeUnixNano = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlattenTraceService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlattenTraceService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlattenTraceService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Service == nil {
				m.Service = &v1.Service{}
			}
			if err := m.Service.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlattenTraceService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFlattenTraceService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExportFlattenTraceServiceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlattenTraceService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExportFlattenTraceServiceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExportFlattenTraceServiceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFlattenTraceService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFlattenTraceService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFlattenTraceService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFlattenTraceService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFlattenTraceService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFlattenTraceService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFlattenTraceService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFlattenTraceService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFlattenTraceService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFlattenTraceService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFlattenTraceService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFlattenTraceService = fmt.Errorf("proto: unexpected end of group")
)
